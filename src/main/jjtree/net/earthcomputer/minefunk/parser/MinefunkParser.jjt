options
{
  STATIC = false;
  NODE_DEFAULT_VOID = true;
  MULTI = true;
  VISITOR = true;
}

PARSER_BEGIN(MinefunkParser)
package net.earthcomputer.minefunk.parser;
import java.util.*;
import net.earthcomputer.minefunk.*;

public class MinefunkParser
{
}

PARSER_END(MinefunkParser)

TOKEN :
{
  < NAMESPACE : "namespace" >
| < TYPEDEF : "typedef" >
| < INLINE : "inline" >
| < CONST : "const" >
| < TRUE : "true" >
| < FALSE : "false" >
| < INTLITERAL :
    (
      < PLUS >
    | < MINUS >
    )?
    (< DIGIT >)+ >
| < STRING_START : "\"" > : STATE_STRING_LITERAL
| < WORD :
    (
      "_"
    | < LETTER >
    )
    (
      "_"
    | < ALPHANUM >
    )* >
| < PLUS : "+" >
| < MINUS : "-" >
| < MULTIPLY : "*" >
| < DIVIDE : "/" >
| < MOD : "%" >
| < OPEN_BRACE : "{" >
| < CLOSE_BRACE : "}" >
| < DOUBLE_COLON : "::" >
| < COMMA : "," >
| < OPEN_PARENTHESIS : "(" >
| < CLOSE_PARENTHESIS : ")" >
| < SEMICOLON : ";" >
| < ASSIGN : "=" >
| < ASSIGN_PLUS : "+=" >
| < ASSIGN_MINUS : "-=" >
| < ASSIGN_MULTIPLY : "*=" >
| < ASSIGN_DIVIDE : "/=" >
| < ASSIGN_MOD : "%=" >
| < ASSIGN_SWAP : "><" >
| < START_COMMAND : "$" > : STATE_COMMAND
}

TOKEN :
{
  < #DIGIT : [ "0"-"9" ] >
| < #LETTER : [ "a"-"z", "A"-"Z" ] >
| < #ALPHANUM :
    < DIGIT >
  | < LETTER > >
}

< STATE_STRING_LITERAL >
TOKEN :
{
  < STRING_BODY :
    (
      ~[ "\"", "\\" ]
    | "\\\\"
    | "\\\""
    )+ >
| < STRING_END : "\"" > : DEFAULT
}

< STATE_COMMAND >
TOKEN :
{
  < COMMAND_BODY :
    (
      ~[ "\r", "\n" ]
    | ("\r" ~[ "\n" ])
    )+ >
| < END_COMMAND :
    (
      "\r\n"
    | "\n"
    ) >
  : DEFAULT
}

SKIP :
{
  " "
| "\t"
| "\r\n"
| "\n"
| < LINE_COMMENT : "//" > : STATE_LINE_COMMENT
| < MULTILINE_COMMENT : "/*" > : STATE_MULTILINE_COMMENT
}

< STATE_LINE_COMMENT >
SKIP :
{
  < LINE_COMMENT_BODY :
    (
      ~[ "\r", "\n" ]
    | ("\r" ~[ "\n" ])
    )+ >
| < END_LINE_COMMENT :
    (
      "\r\n"
    | "\n"
    ) >
  : DEFAULT
}

< STATE_MULTILINE_COMMENT >
SKIP :
{
  < MULTILINE_COMMENT_BODY :
    (
      ~[ "*" ]
    | ("*" ~[ "/" ])
    )+ >
| < END_MULTILINE_COMMENT : "*/" > : DEFAULT
}

public ASTRoot parse() #Root :
{
}
{
  (
    namespace()
  )*
  < EOF >
  {
    ASTNamespace [ ] namespaces = ASTUtil.getNamespaces(jjtThis);
    if (namespaces.length == 0)
    {
      jjtThis.value = new ASTNodeValue(1, 0, 1, 0);
    }
    else
    {
      ASTNodeValue firstValue = (ASTNodeValue) namespaces [ 0 ].value;
      ASTNodeValue lastValue = (ASTNodeValue) namespaces [ namespaces.length - 1 ].value;
      jjtThis.value = new ASTNodeValue(firstValue.getStartLine(), firstValue.getStartColumn(), lastValue.getEndLine(), lastValue.getEndColumn());
    }
    return jjtThis;
  }
}

public void namespace() #Namespace :
{
  Token firstToken;
  Token lastToken;
}
{
  firstToken = < NAMESPACE > 
  identifier() 
  < OPEN_BRACE >
  (
    member()
  )*
  lastToken = < CLOSE_BRACE >
  {
    jjtThis.value = new ASTNodeValue(firstToken.beginLine, firstToken.beginColumn, lastToken.endLine, lastToken.endColumn);
  }
}

public void member() :
{
}
{
  (
    LOOKAHEAD(function())
    function()
  | varDeclStatement()
  )
}

public void typedef() #TypeDef :
{
  Token firstToken;
}
{
  firstToken = < TYPEDEF > 
  identifier()
  < SEMICOLON >
  {
    ASTNodeValue lastValue = (ASTNodeValue) ASTUtil.getNameNode(jjtThis).value;
    jjtThis.value = new ASTNodeValue(firstToken.beginLine, firstToken.beginColumn, lastValue.getEndLine(), lastValue.getEndColumn());
  }
}

public void function() #Function :
{
}
{
  modifiers() 
  type() 
  identifier() 
  < OPEN_PARENTHESIS > 
  paramList() 
  < CLOSE_PARENTHESIS > 
  blockStatement()
  {
    ASTNodeValue firstValue = (ASTNodeValue) ASTUtil.getModifiersNode(jjtThis).value;
    ASTNodeValue lastValue = (ASTNodeValue) ASTUtil.getBody(jjtThis).value;
    jjtThis.value = new ASTNodeValue(firstValue.getStartLine(), firstValue.getStartColumn(), lastValue.getEndLine(), lastValue.getEndColumn());
  }
}

public void paramList() #ParamList :
{
}
{
  (
    varDecl()
    (
      < COMMA > 
      varDecl()
    )*
  )?
  {
    if (jjtThis.children == null || jjtThis.children.length == 0)
    {
      jjtThis.value = new ASTNodeValue(1, 0, 1, 0);
    }
    else
    {
      ASTNodeValue firstValue = (ASTNodeValue) ((ASTVarDeclStmt) jjtThis.children [ 0 ]).value;
      ASTNodeValue lastValue = (ASTNodeValue) ((ASTVarDeclStmt) jjtThis.children [ jjtThis.children.length - 1 ]).value;
      jjtThis.value = new ASTNodeValue(firstValue.getStartLine(), firstValue.getStartColumn(), lastValue.getEndLine(), lastValue.getEndColumn());
    }
  }
}

public void statement() :
{
}
{
  (
    commandStatement()
  | blockStatement()
  |
    (
      LOOKAHEAD(varDeclStatement())
      varDeclStatement()
    | expressionStatement()
    )
  )
}

public void blockStatement() #BlockStmt :
{
  Token firstToken;
  Token lastToken;
}
{
  firstToken = < OPEN_BRACE >
  (
    statement()
  )*
  lastToken = < CLOSE_BRACE >
  {
    jjtThis.value = new ASTNodeValue(firstToken.beginLine, firstToken.beginColumn, lastToken.endLine, lastToken.endColumn);
  }
}

public void commandStatement() #CommandStmt :
{
  Token t;
  Token firstToken;
  Token lastToken;
}
{
  firstToken = < START_COMMAND > 
  t = < COMMAND_BODY > 
  lastToken = < END_COMMAND >
  {
    jjtThis.value = new ASTNodeValue(firstToken.beginLine, firstToken.beginColumn, lastToken.endLine, lastToken.endColumn, t.image);
  }
}

public void varDeclStatement() :
{
}
{
  varDecl() 
  < SEMICOLON >
}

public void varDecl() #VarDeclStmt :
{
}
{
  modifiers() 
  type() 
  identifier()
  (
    < ASSIGN > 
    expression()
  )?
  {
    ASTNodeValue firstValue = (ASTNodeValue) ASTUtil.getModifiersNode(jjtThis).value;
    Node initializer = ASTUtil.getInitializer(jjtThis);
    ASTNodeValue lastValue;
    if (initializer == null)
    {
      lastValue = (ASTNodeValue) ASTUtil.getNameNode(jjtThis).value;
    }
    else
    {
      lastValue = ASTUtil.getNodeValue(initializer);
    }
    jjtThis.value = new ASTNodeValue(firstValue.getStartLine(), firstValue.getStartColumn(), lastValue.getEndLine(), lastValue.getEndColumn());
  }
}

public void expressionStatement() #ExpressionStmt :
{
  Token lastToken;
}
{
  expression() 
  lastToken = < SEMICOLON >
  {
    ASTNodeValue firstValue = (ASTNodeValue) ((SimpleNode) ASTUtil.getExpression(jjtThis)).value;
    jjtThis.value = new ASTNodeValue(firstValue.getStartLine(), firstValue.getStartColumn(), lastToken.endLine, lastToken.endColumn);
  }
}

public void expression() :
{
}
{
  (
    LOOKAHEAD(functionCallExpression())
    functionCallExpression()
  | variableAccessExpression()
  )
| booleanLiteralExpression()
| integerLiteralExpression()
| stringLiteralExpression()
}

public void functionCallExpression() #FunctionCallExpr :
{
  Token firstToken = null;
  Token lastToken;
  Token t;
  List < String > namespaces = new ArrayList < String > ();
  Type value;
}
{
  (
    LOOKAHEAD(2)
    t = < WORD >
    {
      if (firstToken == null) firstToken = t;
      namespaces.add(t.image);
    }
    < DOUBLE_COLON >
  )*
  t = < WORD >
  {
    if (firstToken == null) firstToken = t;
    value = new Type(namespaces, t.image);
  }
  < OPEN_PARENTHESIS >
  (
    expression()
    (
      < COMMA > 
      expression()
    )*
  )?
  lastToken = < CLOSE_PARENTHESIS >
  {
    jjtThis.value = new ASTNodeValue(firstToken.beginLine, firstToken.beginColumn, lastToken.endLine, lastToken.endColumn, value);
  }
}

public void variableAccessExpression() #VarAccessExpr :
{
}
{
  type()
  {
    ASTNodeValue firstValue = (ASTNodeValue) ASTUtil.getVariableNode(jjtThis).value;
    ASTNodeValue lastValue = firstValue;
    jjtThis.value = new ASTNodeValue(firstValue.getStartLine(), firstValue.getStartColumn(), lastValue.getEndLine(), lastValue.getEndColumn());
  }
}

public void booleanLiteralExpression() #BoolLiteralExpr :
{
  Token t;
  Boolean value;
}
{
  (
    t = < TRUE >
    {
      value = Boolean.TRUE;
    }
  | t = < FALSE >
    {
      value = Boolean.FALSE;
    }
  )
  {
    jjtThis.value = new ASTNodeValue(t.beginLine, t.beginColumn, t.endLine, t.endColumn, value);
  }
}

public void integerLiteralExpression() #IntLiteralExpr :
{
  Token t;
}
{
  t = < INTLITERAL >
  {
    try
    {
      jjtThis.value = new ASTNodeValue(t.beginLine, t.beginColumn, t.endLine, t.endColumn, Integer.parseInt(t.image));
    }
    catch (NumberFormatException e)
    {
      // Possible if > Integer.MAX_VALUE or < Integer.MIN_VALUE
      throw Util.createParseException("Integer is out of bounds", t);
    }
  }
}

public void stringLiteralExpression() #StringLiteralExpr :
{
  Token firstToken;
  Token lastToken;
  Token t = null;
  String value;
}
{
  firstToken = < STRING_START > 
  (
  t = < STRING_BODY >
  )?
  {
    value = t == null ? "" : t.image;
  }
  lastToken = < STRING_END >
  {
    jjtThis.value = new ASTNodeValue(firstToken.beginLine, firstToken.beginColumn, lastToken.endLine, lastToken.endColumn, value);
  }
}

public void identifier() #Identifier :
{
  Token t;
}
{
  t = < WORD >
  {
    jjtThis.value = new ASTNodeValue(t.beginLine, t.beginColumn, t.endLine, t.endColumn, t.image);
  }
}

public void modifiers() #Modifiers :
{
  Token firstToken = null;
  Token lastToken = null;
  int modifiers = 0;
}
{
  (
    (
      lastToken = < INLINE >
      {
        if ((modifiers & Modifiers.INLINE) != 0)
        {
          throw Util.createParseException("Duplicate modifier \"inline\"", lastToken);
        }
        modifiers |= Modifiers.INLINE;
      }
    | lastToken = < CONST >
      {
        if ((modifiers & Modifiers.CONST) != 0)
        {
          throw Util.createParseException("Duplicate modifier \"const\"", lastToken);
        }
        modifiers |= Modifiers.CONST;
      }
    )
    {
      if (firstToken == null) firstToken = lastToken;
    }
  )*
  {
    if (firstToken == null)
    {
      jjtThis.value = new ASTNodeValue(1, 0, 1, 0, 0);
    }
    else
    {
      jjtThis.value = new ASTNodeValue(firstToken.beginLine, firstToken.beginColumn, lastToken.endLine, lastToken.endColumn, modifiers);
    }
  }
}

public void type() #Type :
{
  Token firstToken = null;
  Token lastToken;
  Token t;
  List < String > namespaces = new ArrayList < String > ();
}
{
  (
    LOOKAHEAD(2)
    t = < WORD >
    {
      if (firstToken == null) firstToken = t;
      namespaces.add(t.image);
    }
    < DOUBLE_COLON >
  )*
  t = < WORD >
  {
    if (firstToken == null) firstToken = t;
    lastToken = t;
    Type value = new Type(namespaces, t.image);
    jjtThis.value = new ASTNodeValue(firstToken.beginLine, firstToken.beginColumn, lastToken.endLine, lastToken.endColumn, value);
  }
}
